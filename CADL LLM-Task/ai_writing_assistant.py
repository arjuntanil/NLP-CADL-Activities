# -*- coding: utf-8 -*-
"""AI Writing Assistant.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AZMekPBf9XxIL7w-U9irZQHPPJaHI16U
"""

print("STEP 1: Installing libraries...")
!pip install -q gradio transformers torch sentencepiece

# ==============================================================================
# STEP 2: LOAD THE AI MODELS
# This is the same as before, loading our two specialized models.
# ==============================================================================
from transformers import pipeline
import gradio as gr
import textwrap

print("\nSTEP 2: Loading models (this may take a few minutes)...")
# Load the Grammar Correction Model
corrector = pipeline(
    "text2text-generation",
    model="vennify/t5-base-grammar-correction",
    device=0  # Use GPU
)
print("Grammar model loaded.")

# Load the Text Completion Model
completer = pipeline(
    "text-generation",
    model="gpt2",
    device=0  # Use GPU
)
print("Completion model loaded. Building web interface...")

# ==============================================================================
# STEP 3: DEFINE THE CORE LOGIC FUNCTIONS
# We wrap our AI's abilities into simple functions that Gradio can use.
# ==============================================================================

def correct_grammar(text_to_correct):
    """Takes text, corrects it, and returns the result."""
    # The model expects a prefix, which we provide
    corrected_output = corrector("grammar: " + text_to_correct, max_length=256)
    return corrected_output[0]['generated_text']

def complete_text(starting_text):
    """Takes starting text, completes it, and returns the result."""
    completed_output = completer(starting_text, max_length=100, num_return_sequences=1)
    return completed_output[0]['generated_text']

# ==============================================================================
# STEP 4: BUILD AND LAUNCH THE GRADIO WEB INTERFACE
# This section defines the layout of our web app.
# ==============================================================================

with gr.Blocks(theme=gr.themes.Soft()) as demo:
    gr.Markdown("# ü§ñ AI Writing Assistant")
    gr.Markdown("Choose a tool below to either correct your grammar or complete your text.")

    # Create two tabs for our two features
    with gr.Tab("‚úçÔ∏è Grammar Corrector"):
        gr.Markdown("Enter text with grammatical errors and see the corrected version.")
        gc_input = gr.Textbox(lines=5, label="Input Text")
        gc_output = gr.Textbox(lines=5, label="Corrected Text")
        gc_button = gr.Button("Correct Grammar")

    with gr.Tab("üñãÔ∏è Text Completer"):
        gr.Markdown("Enter the beginning of a sentence and let the AI complete it.")
        tc_input = gr.Textbox(lines=5, label="Input Text")
        tc_output = gr.Textbox(lines=5, label="Completed Text")
        tc_button = gr.Button("Complete Text")

    # Define what happens when the buttons are clicked
    gc_button.click(fn=correct_grammar, inputs=gc_input, outputs=gc_output)
    tc_button.click(fn=complete_text, inputs=tc_input, outputs=tc_output)

# Launch the app!
# share=True creates a public, shareable link.
print("\nSTEP 5: Launching the web app...")
demo.launch(share=True, debug=True)